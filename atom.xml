<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech blog of Unicooo</title>
  <subtitle>by unicooo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windsooon.github.io/"/>
  <updated>2016-04-21T16:54:29.000Z</updated>
  <id>https://windsooon.github.io/</id>
  
  <author>
    <name>Unicooo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://windsooon.github.io/2016/04/21/What%20is%20Process%20/"/>
    <id>https://windsooon.github.io/2016/04/21/What is Process /</id>
    <published>2016-04-21T15:31:54.000Z</published>
    <updated>2016-04-21T16:54:29.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What-is-Process&quot;&gt;&lt;a href=&quot;#What-is-Process&quot; class=&quot;headerlink&quot; title=&quot;What is Process&quot;&gt;&lt;/a&gt;What is Process&lt;/h1&gt;&lt;p&gt;When I first know process，I thought I understand it. But then I meet multiprocess, multithread in mutliprocess, coroutine.These start confuce me.Because I don’t know how computer inside duel with them.&lt;/p&gt;
&lt;p&gt;Let’s have a quick look.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, a process is an instance of a computer program that is being executed. It contains the program code and its current activity. Depending on the operating system (OS), a process may be made up of multiple threads of execution that execute instructions concurrently&lt;/p&gt;
&lt;p&gt;–Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is 100% correct but I don’t know what this mean at the beginning, this margin is too small to contain.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this article, I try to explain how process really implement in the computer.&lt;/p&gt;
&lt;h3 id=&quot;Laundry&quot;&gt;&lt;a href=&quot;#Laundry&quot; class=&quot;headerlink&quot; title=&quot;Laundry&quot;&gt;&lt;/a&gt;Laundry&lt;/h3&gt;&lt;p&gt;let’s look an example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, Your wife/husband ask you to do the laundry,&lt;br&gt;you choose the clothes need wished. &lt;/li&gt;
&lt;li&gt;Second, check if any clothes left in the washing machine, if have any, take them off the machine. &lt;/li&gt;
&lt;li&gt;Third, put the dirty clothes into it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computer process just like do the laundry.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, a father process will create a child process and ask it to execute the same code as father process does.The different bewteen father process and child process is they have their own stack. &lt;/li&gt;
&lt;li&gt;Second, check if any process is running, if it does, the child process has to wait after that process finish, because anytime in one CPU, only one process is running. &lt;/li&gt;
&lt;li&gt;Third, the child process begin to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hello-world-program&quot;&gt;&lt;a href=&quot;#Hello-world-program&quot; class=&quot;headerlink&quot; title=&quot;Hello world program&quot;&gt;&lt;/a&gt;Hello world program&lt;/h3&gt;&lt;p&gt;This program will print “Hello world” in the console.&lt;br&gt;C:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
  printf(&amp;quot;Hello world\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;Hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Relax if you not familiar with code, C language code still scare me sometimes :D.&lt;/p&gt;
&lt;p&gt;SO when you run &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user&amp;gt;gcc -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user&amp;gt;python hello.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this moment, &lt;/p&gt;
&lt;p&gt;your terminal which is also a process will create a child process,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a process is created, it is almost identical to its parent. It receives a (logical) copy of the parent’s address&lt;br&gt;space and executes the same code as the parent, beginning at the next instruction following the process&lt;br&gt;creation system call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, The child process were tell to compile the Hello world program to machine code.&lt;/p&gt;
&lt;p&gt;So now, your computer is running two processes.&lt;br&gt;(In fact, your computer will run some processes after you open it, you can use PS -A when your computer base on *nix or tasklist when you using Windows to list all of them. But now, We don’t have to care about these processes right.)&lt;/p&gt;
&lt;p&gt;CPU only understand 0 and 1. In most case, no matter what computer languages you use, for example, C, Python or Java. The code will finally become 0 and 1 then let CPU to execute.&lt;br&gt;Let’s assume the “Hello world” program finally been convert to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;000 001 011 111
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and deliver to CPU.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-is-Process&quot;&gt;&lt;a href=&quot;#What-is-Process&quot; class=&quot;headerlink&quot; title=&quot;What is Process&quot;&gt;&lt;/a&gt;What is Process&lt;/h1&gt;&lt;p&gt;When I first know 
    
    </summary>
    
    
  </entry>
  
</feed>
