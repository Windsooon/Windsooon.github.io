<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech blog of Unicooo</title>
  <subtitle>by unicooo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windsooon.github.io/"/>
  <updated>2017-05-27T15:46:07.000Z</updated>
  <id>https://windsooon.github.io/</id>
  
  <author>
    <name>Unicooo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>路径</title>
    <link href="https://windsooon.github.io/2017/05/27/%E8%B7%AF%E5%BE%84/"/>
    <id>https://windsooon.github.io/2017/05/27/路径/</id>
    <published>2017-05-27T03:41:00.000Z</published>
    <updated>2017-05-27T15:46:07.000Z</updated>
    
    <content type="html">&lt;p&gt;当你打开终端的时候，会看到例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Windows
C:\Administor\foo\:

#OSX
WindsondeMacBook-Air:~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（这篇文章中，统一使用windows的\，如果使用的是其它系统，只需要替换为\）&lt;/p&gt;
&lt;p&gt;这样的字符在行首，这个就是当前执行指令的路径。也就是你的当前路径，那什么是绝对路径和相对路径呢？&lt;/p&gt;
&lt;p&gt;举个现实生活的例子：&lt;br&gt;你在路上遇到你的好朋友李会玩，她问你的公司地址在哪里，你可能有两种答案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中国广东省广州市思哲路石室大厦 &lt;/li&gt;
&lt;li&gt;以这里为起点，西南方向500米的石室大厦 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个答案从国家到省份城市全部巨细无遗地描述出来就相当于绝对路径， 第二个答案以当前的位置为起点所描述的就是相对路径。&lt;br&gt;例如：有个文件存放在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo\test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么你要读取它可以直接读取这个路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;C:\Administor\foo\test.txt&amp;apos;, &amp;apos;r&amp;apos;, encoding=&amp;apos;utf-8&amp;apos;) as f:
    txt = f.readlines()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也可以根据当前自己的位置找这个文件，假如你打开终端，当前路径是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo\:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么你也可以这样读取 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;test.txt&amp;apos;, &amp;apos;r&amp;apos;, encoding=&amp;apos;utf-8&amp;apos;) as f:
    txt = f.readlines()
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;相对路径地址 ＝ 绝对路径的地址－当前路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;test.txt = C:\Administor\foo\test.txt - C:\Administor\foo\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 有些特殊的情况是.以及.. 这两个符号分别代表当前路径以及上一级目录，也就是说如果你当前路径是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.\ = C:\Administor\foo\
..\ = C:\Administor\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;问题来了，假如文件在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo\test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你当前路径为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo\cherry\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要如何读取此文件呢？你既可以使用绝对路径的方式直接读取&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;C:\Administor\foo\test.txt&amp;apos;, &amp;apos;r&amp;apos;, encoding=&amp;apos;utf-8&amp;apos;) as f:
    txt = f.readlines()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;..\test.txt&amp;apos;, &amp;apos;r&amp;apos;, encoding=&amp;apos;utf-8&amp;apos;) as f:
    txt = f.readlines()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实意思就是返回上一层目录就是先到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后再读取文件&lt;/p&gt;
&lt;p&gt;###如何在终端显示当前的绝对路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Windows
pwd

#OSX
pwd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###如何切换路径&lt;br&gt;可以使用cd指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd [PATH]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的path既可以是绝对路径也可以是相对路径，如果当前路径为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Administor\foo\:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你要跳到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\whatever\sunkist\:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd C:\whatever\sunkist\
# 或者
cd ..\..\whatever\sunkist\
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;当你打开终端的时候，会看到例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Windows
C:\Administor\foo\:

#OSX
WindsondeMacBook-Air:~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（这篇文章中，统一使用windows的\，如果使用的是其它系统
    
    </summary>
    
      <category term="EngineGirls" scheme="https://windsooon.github.io/categories/EngineGirls/"/>
    
    
      <category term="基础 EngineGirls" scheme="https://windsooon.github.io/tags/%E5%9F%BA%E7%A1%80-EngineGirls/"/>
    
  </entry>
  
  <entry>
    <title>配置Docker开发环境</title>
    <link href="https://windsooon.github.io/2017/05/27/%E9%85%8D%E7%BD%AEDocker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://windsooon.github.io/2017/05/27/配置Docker开发环境/</id>
    <published>2017-05-27T03:28:44.000Z</published>
    <updated>2017-05-27T16:38:34.000Z</updated>
    
    <content type="html">&lt;p&gt;我们开始安装一些工具来方便我们学习编程，一般初接触编程的同学使用的都是Windows系统或者macOS系统。从这节课开始我们将使用Linux系统来学习编程，不同于Windows以及macOS系统个，Linux系统是一个开源(open source)系统，也就是说它的所有源代码都可以让大家浏览以及审核，提出修改。如何在Windows系统或者macOS系统上运行Linux系统呢？我们可以使用&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker&lt;/a&gt;来在本地使用Linux系统&lt;/p&gt;
&lt;p&gt;###macOS系统安装docker教程&lt;br&gt;(官方英文教程)[&lt;a href=&quot;https://docs.docker.com/toolbox/toolbox_install_mac/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.docker.com/toolbox/toolbox_install_mac/&lt;/a&gt;]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;System Requirements: Docker for Mac will launch only if all of these requirements are met.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac must be a 2010 or newer model, with Intel’s hardware support for memory management unit (MMU) virtualization; i.e., Extended Page Tables (EPT) and Unrestricted Mode.&lt;/li&gt;
&lt;li&gt;OS X El Capitan 10.11 and newer macOS releases are supported. At a minimum, Docker for Mac requires macOS Yosemite 10.10.3 or newer, with the caveat that going forward 10.10.x is a use-at-your-own risk proposition.&lt;/li&gt;
&lt;li&gt;Starting with Docker for Mac Stable release 1.13 (upcoming), and concurrent Edge releases, we will no longer address issues specific to OS X Yosemite 10.10. In future releases, Docker for Mac could stop working on OS X Yosemite 10.10 due to the deprecated status of this OS X version. We recommend upgrading to the latest version of macOS.&lt;br&gt;At least 4GB of RAM&lt;/li&gt;
&lt;li&gt;VirtualBox prior to version 4.3.30 must NOT be installed (it is incompatible with Docker for Mac). If you have a newer version of VirtualBox installed, it’s fine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统必须满足以下全部要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2010后的苹果电脑，支持英特尔MMU内存虚拟&lt;/li&gt;
&lt;li&gt;10.10.3或者更新的苹果系统&lt;/li&gt;
&lt;li&gt;从Docker1.13版本（准备推出）之后不再支持10.10版本（OS X 10.10 Yosemite）&lt;/li&gt;
&lt;li&gt;不能安装4.3.30版本之前的VirtualBox&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;下载软件&lt;a href=&quot;https://download.docker.com/mac/stable/Docker.dmg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker for macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双击Docker.dmg安装&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://github.com/EngineGirl/basic-tutorial/blob/master/imgs/install_docker/docker-app-drag.png?raw=true&quot; alt=&quot;docker-app-drap&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双击应用程序中的Docker.app来启动Docker&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://github.com/EngineGirl/basic-tutorial/blob/master/imgs/install_docker/docker-app-in-apps.png?raw=true&quot; alt=&quot;docker-app-inapp&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;系统会请求你输入密码来启动Docker，Docker需要特殊权限来安装网络组件&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后可以在屏幕右上角看到Docker的标志&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://github.com/EngineGirl/basic-tutorial/blob/master/imgs/install_docker/whale-in-menu-bar.png?raw=true&quot; alt=&quot;docker-app-inapp&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后可以点击这个标志修改设置&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://github.com/EngineGirl/basic-tutorial/blob/master/imgs/install_docker/docker-menu.png?raw=true&quot; alt=&quot;docker-app-inapp&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如此简单就安装成功啦，可以吃点巧克力奖励下自己了。:D&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们开始安装一些工具来方便我们学习编程，一般初接触编程的同学使用的都是Windows系统或者macOS系统。从这节课开始我们将使用Linux系统来学习编程，不同于Windows以及macOS系统个，Linux系统是一个开源(open source)系统，也就是说它的所有源代
    
    </summary>
    
      <category term="EngineGirls" scheme="https://windsooon.github.io/categories/EngineGirls/"/>
    
    
      <category term="基础 EngineGirls" scheme="https://windsooon.github.io/tags/%E5%9F%BA%E7%A1%80-EngineGirls/"/>
    
  </entry>
  
  <entry>
    <title>What Bayes theorem tell us</title>
    <link href="https://windsooon.github.io/2017/03/31/What%20Bayes'theorem%20tell%20us/"/>
    <id>https://windsooon.github.io/2017/03/31/What Bayes'theorem tell us/</id>
    <published>2017-03-31T14:46:22.000Z</published>
    <updated>2017-03-31T14:46:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What-Bayes-theorem-tell-us&quot;&gt;&lt;a href=&quot;#What-Bayes-theorem-tell-us&quot; class=&quot;headerlink&quot; title=&quot;What-Bayes theorem tell us&quot;&gt;&lt;/a&gt;What-Bayes theorem tell us&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Windsooon/What-Bayes-tell-us-/blob/master/README_CHINESE.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###If a person is infected by the disease, the probability of a positive test result will be 90%. However, if someone is not infected, there still will have 9% chances to get the positive result. We have already known that the prevalence of this disease is 1%. &lt;/p&gt;
&lt;p&gt;##If I am tested to be positive, what is the probability of getting a true infection?&lt;/p&gt;
&lt;p&gt;##70%?&lt;/p&gt;
&lt;p&gt;##60%?&lt;/p&gt;
&lt;p&gt;##50%?&lt;/p&gt;
&lt;p&gt;##40%?&lt;/p&gt;
&lt;p&gt;##10%?&lt;/p&gt;
&lt;h2 id=&quot;Answer&quot;&gt;&lt;a href=&quot;#Answer&quot; class=&quot;headerlink&quot; title=&quot;Answer&quot;&gt;&lt;/a&gt;Answer&lt;/h2&gt;&lt;p&gt;Just &lt;strong&gt;9%&lt;/strong&gt;, the key is not the reliability of the test but the prevalence of this disease&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Windsooon/What-Bayes-tell-us-/master/img/90_9.png&quot; alt=&quot;90_9&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the prevalence of this disease&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of true positive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;9.17%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16.95%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;23.62%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;38.96%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;9%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;49.72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;12%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;57.69%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;15%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;63.83%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;68.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;21%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;72.66%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;24%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;75.95%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;27%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;78.72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;30%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;81.08%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;33%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;83.12%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;36%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;84.91%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;39%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;86.47%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;42%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;87.87%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;45%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;89.11%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;48%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90.23%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;51%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;91.23%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;54%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;92.15%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;57%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;92.99%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;60%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93.75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;63%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;94.45%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;66%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;69%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;72%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.26%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;75%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.77%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;78%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.26%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;81%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.71%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;84%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.13%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;87%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.53%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.25%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.59%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of a positive test result if infected&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of a positive test result if not infected&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Windsooon/What-Bayes-tell-us-/master/img/90_3.png&quot; alt=&quot;90_3&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the prevalence of this disease&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of true positive &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;23.26%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;37.97%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;48.13%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;65.69%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;9%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;74.79%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;12%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;80.36%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;15%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;84.11%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;86.82%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;21%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;88.86%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;24%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90.45%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;27%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;91.73%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;30%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;92.78%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;33%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93.66%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;36%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;94.41%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;39%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95.04%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;42%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;45%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.09%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;48%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.51%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;51%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;54%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.24%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;57%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.55%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;60%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.83%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;63%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.08%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;66%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.31%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;69%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.52%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;72%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;75%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;78%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.07%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;81%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.22%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;84%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.37%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;87%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.63%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.86%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.97%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of a positive test result if infected&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of a positive test result if not infected&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;80%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Windsooon/What-Bayes-tell-us-/master/img/80_3.png&quot; alt=&quot;80_3&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the prevalence of this disease&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;the probability of true positive &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;23.26%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;37.97%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;45.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;62.99%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;9%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;72.51%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;12%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;78.43%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;15%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;82.47%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;85.41%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;21%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;87.64%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;24%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;89.39%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;27%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90.79%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;30%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;91.95%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;33%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;92.93%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;36%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93.75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;39%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;94.46%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;42%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95.08%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;45%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95.62%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;48%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;51%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.52%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;54%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;57%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.25%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;60%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.56%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;63%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97.85%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;66%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;69%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.34%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;72%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.56%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;75%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.77%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;78%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;98.95%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;81%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.13%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;84%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.29%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;87%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.44%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.59%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;96%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.84%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99%&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;99.96%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Thank-you&quot;&gt;&lt;a href=&quot;#Thank-you&quot; class=&quot;headerlink&quot; title=&quot;Thank you&quot;&gt;&lt;/a&gt;Thank you&lt;/h2&gt;&lt;h3 id=&quot;inspired-by-Head-First-Data-Analysis&quot;&gt;&lt;a href=&quot;#inspired-by-Head-First-Data-Analysis&quot; class=&quot;headerlink&quot; title=&quot;inspired by Head First Data Analysis&quot;&gt;&lt;/a&gt;inspired by &lt;a href=&quot;https://www.amazon.com/Head-First-Data-Analysis-statistics/dp/0596153937&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Head First Data Analysis&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;wanqic-for-englist-translation&quot;&gt;&lt;a href=&quot;#wanqic-for-englist-translation&quot; class=&quot;headerlink&quot; title=&quot;@wanqic for englist translation&quot;&gt;&lt;/a&gt;@wanqic for englist translation&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-Bayes-theorem-tell-us&quot;&gt;&lt;a href=&quot;#What-Bayes-theorem-tell-us&quot; class=&quot;headerlink&quot; title=&quot;What-Bayes theorem tell us&quot;&gt;&lt;/a&gt;What-Bay
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习实战(url分类)</title>
    <link href="https://windsooon.github.io/2017/03/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98-url%E5%88%86%E7%B1%BB/"/>
    <id>https://windsooon.github.io/2017/03/31/机器学习实战-url分类/</id>
    <published>2017-03-30T16:40:44.000Z</published>
    <updated>2017-03-30T16:42:20.000Z</updated>
    
    <content type="html">&lt;p&gt;实际应用中，我们经常需要对集合进行分类，一方面可以进行统计，另一方面也可以用作去重。常见的例如&lt;strong&gt;url分类&lt;/strong&gt;（本质上是字符串分类，不过又因为url的特殊性使其需要特别处理），&lt;strong&gt;地址分类&lt;/strong&gt;（经纬度分类），&lt;strong&gt;文章分类&lt;/strong&gt;（文章分类我们之后会介绍）。分类的其中一种思路是先把集合量化为几项特征值，使其可以计算出个体间的距离。然后通过分类算法（这里使用的是k-means算法）进行分类。&lt;/p&gt;
&lt;p&gt;  这里举的例子是url分类，我们从爬虫获取到url，需要把它们分成不同的类别。我们先分析一个url：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.example.com/abc/123?id=1 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以把url抽象成几个特征：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;http还是https，域名，目录，目录深度，参数，参数数量，域名在Alexa上的排名。域名在搜索引擎的收录数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步非常重要，有些开发者往往只在乎算法的效率和实现，忽略了从需求角度去对数据进行分析和提取。就像理查德费曼所说的，“无论计算机多少神奇，你给它的是垃圾，它出来的也是垃圾”。&lt;/p&gt;
&lt;p&gt;分析以上的url我们可以得到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问安全性：https&lt;/li&gt;
&lt;li&gt;域名为：www.example.com&lt;/li&gt;
&lt;li&gt;目录：abc/123&lt;/li&gt;
&lt;li&gt;目录深度：三级&lt;/li&gt;
&lt;li&gt;参数：id=1&lt;/li&gt;
&lt;li&gt;参数数量：1个&lt;/li&gt;
&lt;li&gt;Alexa排名：10000（非真实）&lt;/li&gt;
&lt;li&gt;搜索引擎收录数：1000（非真实）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们根据需求给这8个特征赋予不同的权重&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Similarity = 域名 * 0.4 + 目录 * 0.2 + 目录深度 * 0.2 + 参数 * 0.1 + 参数数量 * 0.1 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里我们只使用5个特征，特征的数量对具体实现并没有影响。不过这里需要注意一个问题，在计算距离的时候我们可以使用&lt;strong&gt;欧式距离（Euclidean Distance）&lt;/strong&gt;，&lt;strong&gt;编辑距离（Edit Distance）&lt;/strong&gt;，&lt;strong&gt;余弦相似性（Cosine Similarity）&lt;/strong&gt;。欧式距离公式如下：&lt;/p&gt;
&lt;p&gt;在这里我们可以看到，不同的特征由于它的绝对值范围不同（例如域名一般会在20个字符串内，而Alexa排名却可以在一到几百万的区间），对最终距离影响的范围也不同。例如在所有url中Alexa排名最前的拍在第100位，最后为2000位。那么这两个url的距离因为排名这个特征被过度放大了。所以在计算距离之前，我们常常需要归一化数值，将特征值的取值范围局限在0到1或者-1到1之间，公式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;newValue = (oldValue - min) / (max - min)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假如集合中一个url的排名为500，那么在计算过之后就变成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;newValue = (500 - 100) / (2000 - 100) = 0.21
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后可以计算url之间每个特征的编辑距离。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.example.com/abc/123?id=1
https://www.example.com/abc/cdf/258?id=19
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的编辑距离分别为，0，6，1，1，0，（这是归一化数值之前的编辑距离，实际应用需要先获得每个特征值的距离最大最小值，之后再把编辑距离转化为0到1之间）计算编辑距离的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np

def levenshtein(source, target):
    &amp;apos;&amp;apos;&amp;apos; 使用矩阵计算比其他方法快40% &amp;apos;&amp;apos;&amp;apos;
    if len(source) = len(target).
    if len(target) == 0:
        return len(source)

    # We call tuple() to force strings to be used as sequences
    # (&amp;apos;c&amp;apos;, &amp;apos;a&amp;apos;, &amp;apos;t&amp;apos;, &amp;apos;s&amp;apos;) - numpy uses them as values by default.
    source = np.array(tuple(source))
    target = np.array(tuple(target))

    # We use a dynamic programming algorithm, but with the
    # added optimization that we only need the last two rows
    # of the matrix.
    previous_row = np.arange(target.size + 1)
    for s in source:
        # Insertion (target grows longer than source):
        current_row = previous_row + 1

        # Substitution or matching:
        # Target and source items are aligned, and either
        # are different (cost of 1), or are the same (cost of 0).
        current_row[1:] = np.minimum(
                current_row[1:],
                np.add(previous_row[:-1], target != s))

        # Deletion (target grows shorter than source):
        current_row[1:] = np.minimum(
                current_row[1:],
                current_row[0:-1] + 1)

        previous_row = current_row

    return previous_row[-1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他实现方法可以参考&lt;a href=&quot;https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编辑距离&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知道怎么计算距离，就可以使用分类算法，简单的可以使用k-means。这里为了讲解，并不是用numpy库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import random
import functools
from ml_logging import setup_logging


setup_logging(__name__)


def read_from_file(file_name, dimension_num, split_char):
    &amp;apos;&amp;apos;&amp;apos;从文件读取数据
       file_name: 数据源文件名
       dimension_num: 选择的数据维度数量
       split_char: 数据分隔符
    &amp;apos;&amp;apos;&amp;apos;
    def list_to_float(
            line, dimension_num=dimension_num, split_char=split_char):
        l = [float(x) for x in line.replace(&amp;quot;\n&amp;quot;, &amp;quot;&amp;quot;).split(
            split_char)[:dimension_num]]
        return l

    try:
        with open(file_name, &amp;apos;r&amp;apos;) as data:
            # 若每行数据源为a1 a2 a3
            # 返回格式为float数值
            # [[a1, a2, a3], [b1, b2, b3], [c1, c2, c3]]
            dataset = [list_to_float(x) for x in data]
    except IOError:
        pass
    return dataset


def cluster_random(dataset, chuster_num):
    &amp;apos;&amp;apos;&amp;apos;随机选择质点
       dataset: 数据源
       chuster_num: 质点数量
    &amp;apos;&amp;apos;&amp;apos;
    return random.sample(dataset, chuster_num)


def cal_distance(a, b):
    &amp;apos;&amp;apos;&amp;apos;计算两个数据源之间的欧几里得距离
       dataset: 数据源
       chuster_num: 质点数量
    &amp;apos;&amp;apos;&amp;apos;
    return functools.reduce(
        lambda x, y: x+y, [(x - y) ** 2 for x, y in zip(a, b)]) ** 0.5


def cal_multi(cluster_list, dataset):
    &amp;apos;&amp;apos;&amp;apos;把每一个点分到最近的质心，返回分组后的情况
       cluster_list: 质心列表
       dataset: 数据源
    &amp;apos;&amp;apos;&amp;apos;
    di = {}
    for i in dataset:
        ans = list(map(lambda x: cal_distance(i, x), cluster_list))
        cluster_index = ans.index(min(ans))
        di.setdefault(cluster_index, []).append(i)
        # di返回的格式应该如下：
        # di = {
        #          1: [[a1, a2], [c1, c2]],
        #          2: [[b1, b2], [d1, d2]]
        #      }
    return di


def new_cluster(cluster_dict):
    &amp;apos;&amp;apos;&amp;apos;获取新的聚簇点
       cluster_dict: 包含分组信息的字典
    &amp;apos;&amp;apos;&amp;apos;
    def average(nums):
        return sum(nums)/len(nums)

    return list(
        map(lambda x: (average(n) for n in zip(*x.values())), cluster_dict))


def main(file_name, dimension_num, split_char, k):
    # 读取数据
    dataset = read_from_file(file_name, dimension_num, split_char)
    # 选择初始的k个质点
    cluster_list = cluster_random(dataset, k)
    # 这是第一次分组
    cluster_before = False
    # 默认分组为空
    cluster_dict = {}
    while 1:
        if cluster_before:
            # 根据现有分组情况计算新的质心
            new_cluster(cluster_dict)
        else:
            cur_dict = cal_multi(cluster_list, dataset)
            cluster_before = True
            if cur_dict == cluster_dict:
                break
            else:
                cluster_dict = cur_dict
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用numpy实现可以参考&lt;a href=&quot;https://datasciencelab.wordpress.com/2013/12/12/clustering-with-k-means-in-python/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python的k-means实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里使用k-means算法，太受随机起始点的影响，可以结合二分k-means和k-means++进行分类，使分类更加稳定。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;实际应用中，我们经常需要对集合进行分类，一方面可以进行统计，另一方面也可以用作去重。常见的例如&lt;strong&gt;url分类&lt;/strong&gt;（本质上是字符串分类，不过又因为url的特殊性使其需要特别处理），&lt;strong&gt;地址分类&lt;/strong&gt;（经纬度分类），&lt;stron
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker基础(-)</title>
    <link href="https://windsooon.github.io/2017/03/31/docker%E5%9F%BA%E7%A1%80/"/>
    <id>https://windsooon.github.io/2017/03/31/docker基础/</id>
    <published>2017-03-30T16:39:00.000Z</published>
    <updated>2017-03-31T14:49:13.000Z</updated>
    
    <content type="html">&lt;p&gt;当一个项目组件以及功能越来越多，开发人员越来越多的时候，很难保证大家都熟悉某一种语言或者框架。传统的项目模块间互相依赖，代码量大，项目臃肿。现在软件开发更提倡微服务，小型的模块架构，模块之间减少互相依赖而只提供对外的API，docker非常适合微服务架构。&lt;/p&gt;
&lt;p&gt;docker原意是码头工人，container原意集装箱,集装箱把货物之间分隔，提高轮船运输率，是运输业革命性的创新。docker把每个组件之间之间分隔。不同于传统的虚拟机，docker模拟的是一个个容器，每个容器都建立在images基础上，docker容器实际上是给镜像上添加一个读写层。 &lt;/p&gt;
&lt;p&gt;docker文档里面包含很多工具，网上许多教程都是基于这些工具而写的，初学者如果一开始没有接触过，很容易混淆，并且不知道哪些是自己需要用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;li&gt;docker-machine&lt;/li&gt;
&lt;li&gt;docker swarm&lt;/li&gt;
&lt;li&gt;docker hub&lt;/li&gt;
&lt;li&gt;docker toolbox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们先不管上面的概念，以先从最基础的指令开始了解，再一步步介绍：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run ubuntu（ubuntu默认bash就是 /bin/bash，所以后面不加此指令也可以）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条指令的意思就是利用docker运行一个基于ubuntu镜像的容器:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unable to find image &amp;apos;ubuntu:latest&amp;apos; locally
latest: Pulling from library/ubuntu
6bbedd9b76a4: Downloading [======&amp;gt;      ] 5.997 MB/49.87 MB
fc19d60a83f1: Download complete 
de413bb911fd: Download complete 
2879a7ad3144: Download complete 
668604fde02e: Download complete 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;docker会先尝试从本地寻找ubuntu这个镜像，如果没有找到的话，会从docker hub这个公有仓库里面下载到本地。ubuntu镜像包含了什么呢，从&lt;a href=&quot;https://hub.docker.com/_/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker-ubuntu&lt;/a&gt;可以看到这个镜像是用官方的tar包构建。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What’s in this image?&lt;br&gt;This image is built from official rootfs tarballs provided by Canonical (specifically, &lt;a href=&quot;https://partner-images.canonical.com/core/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://partner-images.canonical.com/core/&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载完之后运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a

CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
7e74b2522c3a        ubuntu              &amp;quot;/bin/bash&amp;quot;         14 seconds ago      Exited (0) 12 seconds ago                       hopeful_pare
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这句指令列出现在所有容器的状态与基本信息，我们可以看到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CONTAINER ID 容器唯一ID为7e74b2522c3a（在你的电脑会有所不同），&lt;/li&gt;
&lt;li&gt;IMAGE 基于ubuntu官方镜像构建（ubuntu镜像也可以选择不同的版本以及不同个人或组织修改过的版本）&lt;/li&gt;
&lt;li&gt;COMMAND &lt;a href=&quot;https://github.com/dockerfile/ubuntu/blob/master/Dockerfile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/dockerfile/ubuntu/blob/master/Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CREATED 创建时间&lt;/li&gt;
&lt;li&gt;&lt;p&gt;STATUS  状态, 状态分为下面几种，具体含义可以参考官方文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;created &lt;/li&gt;
&lt;li&gt;restarting&lt;/li&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;paused&lt;/li&gt;
&lt;li&gt;exited    &lt;/li&gt;
&lt;li&gt;dead&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PORTS 运行的端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it -p 6677:6677 ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这条指令告诉docker把宿主，也就是此物理机的6677端口，与容器的6677端口相绑定。除了端口可以相互绑定，文件系统，也就是docker里面的volume也可以用类似的方法绑定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NAMES 容器的名字&lt;br&gt;可以通过 -name 指定，没有指定的话docker会自己分配一个给容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到例子1，我们看到这个容器运行之后STATUS显示马上退出了，但是第二个例子进入了容器内的终端，（通过 -it）并且STATUS是UP…，这里我一开始也觉得很困惑，为什么刚启动马上就退出了。后来了解到根据docker容器设计的思想，容器的生命周期是短暂的。它基于镜像，运行完指定的指令之后就会退出。而常规的数据库服务与web服务是一直运行的，所以不会退出。当有时候你需要做一些一次性的工作，例如数据库表的建立，此处以Django为例，建立migration记录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d your_images python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行完之后这个container就EXITED了。也可以删除此container了。&lt;br&gt;关于docker run的具体资料可以参考&lt;a href=&quot;https://docs.docker.com/engine/reference/run/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker run reference&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;先介绍第一个工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dockerfile&lt;br&gt;默认的docker官方image都是以最少组件为目的，和虚拟机不同，拉一个ubuntu镜像下来很多基本命令都用不了，例如curl，因为官方image默认就没有安装。如果你需要安装curl，那你就可以基于官方镜像建立自己的镜像，这时候就可以使用&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile&lt;/a&gt;，建立文件名为Dockerfile的文件，然后写入：&lt;/p&gt;
&lt;p&gt;  FROM ubuntu&lt;br&gt;  RUN apt-get update&lt;br&gt;  RUN apt-get install -y curl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后在该文件同级目录运行（注意最后的.）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build -t my_ubuntu .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就建立了你自己的可以自带curl的镜像：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it my_ubuntu 
curl --help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dockerfile里面有几个常用的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FROM ubuntu&lt;br&gt;从ubuntu镜像的基础上建立镜像&lt;/li&gt;
&lt;li&gt;RUN apt-get update&lt;br&gt;运行apt-get update命令（通常是安装包与组件）&lt;/li&gt;
&lt;li&gt;CMD echo “Hello world”&lt;br&gt;运行echo “Hello world” 命令（常规命令）&lt;br&gt;RUN与CMD的区别可以参考这里&lt;a href=&quot;http://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker RUN vs CMD vs ENTRYPOINT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EXPOSE 3306&lt;br&gt;基于此镜像建立的容器对外界暴露的端口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The EXPOSE instruction indicates the ports on which a container will listen for connections. Consequently, you should use the common, traditional port for your application. For example, an image containing the Apache web server would use EXPOSE 80, while an image containing MongoDB would use EXPOSE 27017 and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH&lt;br&gt;设置容器的环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADD or COPY&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;COPY requirements.txt /tmp/
RUN pip install --requirement /tmp/requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为RUN里的命令是在镜像内部进行的，假如你需要读取宿主的文件来执行命令。如上面所示，先把当前目录下的requirements.txt拷贝到容器中的/tmp/文件夹里，然后运行RUN命令。之后基于此镜像运行容器的时候，只要你没有使用-v绑定宿主与容器的文件系统，/tmp/就都会有requirements.txt这个文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VOLUME&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ubuntu
RUN mkdir /myvol
RUN echo &amp;quot;hello world&amp;quot; &amp;gt; /myvol/greeting
VOLUME /myvol
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;镜像中先创建了/myvol文件夹，运行echo “hello world”，之后创建了/myvol文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build -t volume-example .
docker run -it -v /tmp/:/myvol volume-example
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过-v参数可以把宿主的/tmp文件夹与容器的/myvol文件夹绑定在一起，只要修改其中一方，另外一方也会被修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docoker-compose&lt;br&gt;Dockerfile可以说帮我们简化了许多工作，docker-compose则进一步减少我们的工作量，我们看看docker-compose的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &amp;apos;2&amp;apos;
services:
  mysqldb:
    restart: always
    image: mysql:latest
    ports:
      - &amp;quot;3306:3306&amp;quot;
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_USER: www
      MYSQL_PASSWORD: www
      MYSQL_DATABASE: example_database
    volumes:
      - mysqldata:/var/lib/mysql
      - ./config/:/etc/mysql/conf.d
  web:
    restart: always
    build: ./example_code
    env_file: .env
    environment:
      DEBUG: &amp;apos;true&amp;apos;
      PYTHONPATH: &amp;apos;/usr/src/app/app_platform&amp;apos;
    command: bash -c &amp;quot;python manage.py runserver&amp;quot;
    volumes:
      - ./example_code:/usr/src/app
      - /usr/src/app/static
    ports:
      - &amp;quot;8000&amp;quot;
    dns:
        - 114.114.114.114
        - 8.8.8.8
    links:
      - mysqldb
  nginx:
    restart: always
    build: ./nginx/
    ports:
      - &amp;quot;80:80&amp;quot;
    volumes:
      - ./example_code:/usr/src/app
      - ./nginx/sites-enabled/:/etc/nginx/sites-enabled
    links:
      - web:web
volumes:
    mysqldata:
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一开始看可能一头雾水，放松点，我们慢慢一步步分析这个文件，首先整个服务分为三大块，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql数据库，web服务，nginx服务&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先看代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &amp;apos;2&amp;apos;
services:
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为docker-compose暂时有两个版本，新版本多了一些参数和选项，我们这里使用第二个版本，下面的代码都是compose中的组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqldb:
    restart: always //1
    image: mysql:latest //2
    ports: //3
      - &amp;quot;3306:3306&amp;quot;
    environment: //4
      MYSQL_ROOT_PASSWORD: example
      MYSQL_USER: www
      MYSQL_PASSWORD: www
      MYSQL_DATABASE: example_database
    volumes: //5
      - mysqldata:/var/lib/mysql
      - ./config/:/etc/mysql/conf.d
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;如果遇到错误自动重启（如果错误没有解决会不断重启）&lt;/li&gt;
&lt;li&gt;使用mysql官方镜像（也可以使用自己基于其修改的镜像，这里可以使用build，指定Dockerfile的位置）&lt;/li&gt;
&lt;li&gt;主机的3306端口与容器的3306端口相连接。&lt;/li&gt;
&lt;li&gt;设置mysql的环境变量，具体设置docker hub的官方镜像里一般都有，可以参考&lt;a href=&quot;https://hub.docker.com/_/mysql/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker-hub-mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mysqldata:/var/lib/mysql，在代码的最下面可以看到 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;volumes: 
    mysqldata:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; docker1.9之后专门为数据持久化而推出named volume，&lt;a href=&quot;https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manage data in containers&lt;/a&gt;，通过此指令创建一个独立的volume，不会因为删除container，image而丢失，可以通过&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker volume list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 查看现有宿主的volume，所以这里指把容器中/var/lib/mysql中所有数据都独立存储在mysqldata这个volume中，接下来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./config/:/etc/mysql/conf.d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 把当前目录中的config文件夹与容器中/etc/mysql/conf.d想关联，这里等于重写了mysql的默认配置。具体可以参考&lt;a href=&quot;http://severalnines.com/blog/mysql-docker-containers-understanding-basics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL Docker Containers: Understanding the basics&lt;/a&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;web&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web:
    restart: always
    build: ./example_code //1
    env_file: .env //2
    environment:
      DEBUG: &amp;apos;true&amp;apos;
      PYTHONPATH: &amp;apos;/usr/src/app/app_platform&amp;apos;
    command: bash -c &amp;quot;python manage.py runserver&amp;quot; //3
    volumes:
      - ./example_code:/usr/src/app
      - /usr/src/app/static
    ports:
      - &amp;quot;8000&amp;quot;
    dns:
        - 114.114.114.114
        - 8.8.8.8
    links: //4
      - mysqldb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;从./example_code文件夹中的Dockerfile建立并使用该镜像&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以把你需要的环境变量都写在一个文件里，然后通过env_file引用，注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Environment variables specified in environment override these values.&lt;br&gt;如果同时你也指定了environment变量，env_file中变量将被覆盖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;容器启动时运行的指令&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为web服务需要连接mysql，原本代码可能是通过IP+端口的方式连接，使用links的意思是通过查找mysqldb就能直接连接数据库，相当于数据库别名，这里以django为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DATABASES = {
    &amp;apos;default&amp;apos;: {
        &amp;apos;ENGINE&amp;apos;: &amp;apos;django.db.backends.mysql&amp;apos;,
        &amp;apos;NAME&amp;apos;: &amp;apos;example&amp;apos;,
        &amp;apos;USER&amp;apos;: &amp;apos;www&amp;apos;,
        &amp;apos;PASSWORD&amp;apos;: &amp;apos;www&amp;apos;,
        &amp;apos;HOST&amp;apos;: &amp;apos;mysqldb&amp;apos;,
        &amp;apos;PORT&amp;apos;: &amp;apos;3306&amp;apos;,
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;留意HOST参数，我们直接使用了mysqldb取代了之前的IP&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nginx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx:
    restart: always
    build: ./nginx/
    ports:
      - &amp;quot;80:80&amp;quot;
    volumes:
      - ./example_code:/usr/src/app
      - ./nginx/sites-enabled/:/etc/nginx/sites-enabled
    links:
      - web:web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这部分基本与web一样，接着运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建立镜像，并且基于docker-compose中的设置建立容器。&lt;strong&gt;容器会按照compose中的顺序启动，但后面的容器不会等前面的准备就绪才启动&lt;/strong&gt;，也就是说一开始docker启动mysql-&amp;gt;web-&amp;gt;nginx，不过因为mysql启动与建立需要时间比较久，所以当web与nginx都启动后mysql有可能还没有准备好，这时候查看log的话就会看到无法连接mysqldb的日志，不过只需要等待一会就好。文档有强调这点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can control the order of service startup with the depends_on option. Compose always starts containers in dependency order, where dependencies are determined by depends_on, links, volumes_from and network_mode: “service:…”.&lt;/p&gt;
&lt;p&gt;However, Compose will not wait until a container is “ready” (whatever that means for your particular application) - only until it’s running. There’s a good reason for this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一章我们会继续介绍接下来的几款工具。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当一个项目组件以及功能越来越多，开发人员越来越多的时候，很难保证大家都熟悉某一种语言或者框架。传统的项目模块间互相依赖，代码量大，项目臃肿。现在软件开发更提倡微服务，小型的模块架构，模块之间减少互相依赖而只提供对外的API，docker非常适合微服务架构。&lt;/p&gt;
&lt;p&gt;d
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>What is Process</title>
    <link href="https://windsooon.github.io/2016/04/21/What%20is%20Process%20/"/>
    <id>https://windsooon.github.io/2016/04/21/What is Process /</id>
    <published>2016-04-21T15:31:54.000Z</published>
    <updated>2016-04-24T15:07:03.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What-is-Process&quot;&gt;&lt;a href=&quot;#What-is-Process&quot; class=&quot;headerlink&quot; title=&quot;What is Process&quot;&gt;&lt;/a&gt;What is Process&lt;/h1&gt;&lt;p&gt;When I first know process，I thought I understand it. But then I meet multiprocess, multithread in mutliprocess, coroutine.These start confuce me.Because I don’t know how computer inside duel with them.&lt;/p&gt;
&lt;p&gt;Let’s have a quick look.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, a process is an instance of a computer program that is being executed. It contains the program code and its current activity. Depending on the operating system (OS), a process may be made up of multiple threads of execution that execute instructions concurrently&lt;/p&gt;
&lt;p&gt;–Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is 100% correct but I don’t know what this mean at the beginning, this margin is too small to contain.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this article, I try to explain how process really implement in the computer.&lt;/p&gt;
&lt;h3 id=&quot;Laundry-Example&quot;&gt;&lt;a href=&quot;#Laundry-Example&quot; class=&quot;headerlink&quot; title=&quot;Laundry Example&quot;&gt;&lt;/a&gt;Laundry Example&lt;/h3&gt;&lt;p&gt;let’s look an example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, Your wife/husband ask you to do the laundry,&lt;br&gt;you choose the clothes need wished. &lt;/li&gt;
&lt;li&gt;Second, check if any clothes left in the washing machine, if have any, take them off the machine. &lt;/li&gt;
&lt;li&gt;Third, put the dirty clothes into it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computer process just like do the laundry.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, a father process will create a child process and ask it to execute the same code as father process does.The different bewteen father process and child process is they have their own stack. &lt;/li&gt;
&lt;li&gt;Second, check if CPU running any process, if it does, the child process has to wait after that process finish, because CPU can only run one process in the same time&lt;/li&gt;
&lt;li&gt;Third, the child process begin to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hello-world-program&quot;&gt;&lt;a href=&quot;#Hello-world-program&quot; class=&quot;headerlink&quot; title=&quot;Hello world program&quot;&gt;&lt;/a&gt;Hello world program&lt;/h3&gt;&lt;p&gt;This program will print “Hello world” in the console.&lt;br&gt;C:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
  printf(&amp;quot;Hello world\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;Hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Relax if you not familiar with code, C language code still scare me sometimes :D.&lt;/p&gt;
&lt;p&gt;SO when you run &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user&amp;gt;gcc -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user&amp;gt;python hello.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this moment, &lt;/p&gt;
&lt;p&gt;your terminal which is also a process will create a child process,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a process is created, it is almost identical to its parent. It receives a (logical) copy of the parent’s address&lt;br&gt;space and executes the same code as the parent, beginning at the next instruction following the process&lt;br&gt;creation system call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, The child process were tell to compile the Hello world program to machine code.&lt;/p&gt;
&lt;p&gt;So now, your computer is running two processes.&lt;br&gt;(In fact, your computer will run some processes after you open it, you can use PS -A when your computer base on *nix or tasklist when you using Windows to list all of them. But now, We don’t have to care about these processes right.)&lt;/p&gt;
&lt;p&gt;CPU only understand 0 and 1. In most case, no matter what computer languages you use, for example, C, Python or Java. The code will finally become 0 and 1 then let CPU to execute.&lt;br&gt;Let’s assume the “Hello world” program finally been convert to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;000 001 011 111
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and deliver to CPU.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-is-Process&quot;&gt;&lt;a href=&quot;#What-is-Process&quot; class=&quot;headerlink&quot; title=&quot;What is Process&quot;&gt;&lt;/a&gt;What is Process&lt;/h1&gt;&lt;p&gt;When I first know 
    
    </summary>
    
    
  </entry>
  
</feed>
